/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 13 00:43:45 GMT 2022
 */

package org.remast.baralga.repository;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.Instant;
import org.joda.time.chrono.GJChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;
import org.remast.baralga.repository.ActivityVO;
import org.remast.baralga.repository.ProjectVO;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActivityVO_ESTest extends ActivityVO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO("", "iI_#9@i~aJw 35XS74n", "", false);
      ActivityVO activityVO0 = new ActivityVO("S0f$", (DateTime) null, (DateTime) null, "S0f$", projectVO0);
      DateTime dateTime0 = activityVO0.getStart();
      assertNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
      ProjectVO projectVO0 = new ProjectVO("x.AV##v3P wR @OqL'", "x.AV##v3P wR @OqL'", "", true);
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, projectVO0);
      DateTime dateTime1 = activityVO0.getStart();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime1, dateTime0, "year", projectVO0);
      DateTime dateTime2 = activityVO0.getStart();
      assertEquals((-75600000L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      ProjectVO projectVO1 = activityVO0.getProject();
      assertEquals("year", projectVO1.getDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO((String) null, "Q#!`l20670ZMCh<})J'", (String) null, false);
      ActivityVO activityVO0 = new ActivityVO((DateTime) null, (DateTime) null, projectVO0);
      ProjectVO projectVO1 = activityVO0.getProject();
      assertSame(projectVO1, projectVO0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      String string0 = activityVO0.getId();
      assertEquals("year", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO("", (String) null, (String) null, false);
      ActivityVO activityVO0 = new ActivityVO("", (DateTime) null, (DateTime) null, "?:r/1M=P`WQ1I>3*gcc", projectVO0);
      String string0 = activityVO0.getId();
      assertEquals("?:r/1M=P`WQ1I>3*gcc", activityVO0.getDescription());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO("", "iI_#9@i~aJw 35XS74n", "", false);
      ActivityVO activityVO0 = new ActivityVO("S0f$", (DateTime) null, (DateTime) null, "S0f$", projectVO0);
      DateTime dateTime0 = activityVO0.getEnd();
      assertNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      ProjectVO projectVO0 = new ProjectVO("PeriodFormat.seconds.regex", (String) null, "PeriodFormat.seconds.regex", false);
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, projectVO0);
      DateTime dateTime1 = activityVO0.getEnd();
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1486L));
      ActivityVO activityVO0 = new ActivityVO(",mdfw=", dateTime0, dateTime0, ",mdfw=", (ProjectVO) null);
      DateTime dateTime1 = activityVO0.getEnd();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      ProjectVO projectVO0 = new ProjectVO("", (String) null, "", false);
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, projectVO0);
      activityVO0.setDescription("");
      String string0 = activityVO0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, (ProjectVO) null);
      activityVO0.setProject((ProjectVO) null);
      assertNull(activityVO0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, (ProjectVO) null);
      String string0 = activityVO0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      ProjectVO projectVO0 = new ProjectVO("x.AV##v3P wR @OqL'", "x.AV##v3P wR @OqL'", "", true);
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, projectVO0);
      DateTime dateTime1 = activityVO0.getStart();
      assertSame(dateTime0, dateTime1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, (ProjectVO) null);
      ProjectVO projectVO0 = activityVO0.getProject();
      assertNull(projectVO0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO((String) null, "Q#!`l20670ZMCh<})J'", (String) null, false);
      ActivityVO activityVO0 = new ActivityVO((DateTime) null, (DateTime) null, projectVO0);
      activityVO0.setId("Q#!`l20670ZMCh<})J'");
      assertEquals("Q#!`l20670ZMCh<})J'", activityVO0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, (ProjectVO) null);
      String string0 = activityVO0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, (ProjectVO) null);
      activityVO0.setDescription("6y?^oc");
      String string0 = activityVO0.getDescription();
      assertEquals("6y?^oc", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, (ProjectVO) null);
      activityVO0.setEnd(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      DateTime dateTime1 = activityVO0.getEnd();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      activityVO0.setStart(dateTime0);
      assertEquals("year", activityVO0.getId());
  }
}
