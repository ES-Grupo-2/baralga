/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 17 12:36:51 GMT 2022
 */

package org.remast.baralga.repository;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.chrono.GJChronology;
import org.junit.runner.RunWith;
import org.remast.baralga.repository.ActivityVO;
import org.remast.baralga.repository.ProjectVO;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActivityVO_ESTest extends ActivityVO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO("ReadablePartial objects must not have overlapping fields", "org.remast.baralga.repository.ActivityVO", "org.remast.baralga.repository.ActivityVO", true);
      ActivityVO activityVO0 = new ActivityVO((String) null, (DateTime) null, (DateTime) null, "ReadablePartial objects must not have overlapping fields", projectVO0);
      DateTime dateTime0 = activityVO0.getStart();
      assertNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      ProjectVO projectVO0 = new ProjectVO("", "", "6kQeAK=:Pks'?>", false);
      ActivityVO activityVO0 = new ActivityVO("", dateTime0, dateTime0, "", projectVO0);
      DateTime dateTime1 = activityVO0.getStart();
      assertSame(dateTime0, dateTime1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime1, dateTime0, "year", projectVO0);
      DateTime dateTime2 = activityVO0.getStart();
      assertEquals((-75600000L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActivityVO activityVO0 = new ActivityVO((DateTime) null, (DateTime) null, (ProjectVO) null);
      ProjectVO projectVO0 = activityVO0.getProject();
      assertNull(projectVO0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      ProjectVO projectVO1 = activityVO0.getProject();
      assertTrue(projectVO1.isActive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      String string0 = activityVO0.getId();
      assertEquals("year", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActivityVO activityVO0 = new ActivityVO((DateTime) null, (DateTime) null, (ProjectVO) null);
      activityVO0.setId("");
      String string0 = activityVO0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO("", "", "", false);
      ActivityVO activityVO0 = new ActivityVO((DateTime) null, (DateTime) null, projectVO0);
      DateTime dateTime0 = activityVO0.getEnd();
      assertNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      ProjectVO projectVO0 = new ProjectVO("W>YB{=%{ D/%&9", "h", "W>YB{=%{ D/%&9", true);
      ActivityVO activityVO0 = new ActivityVO("h", dateTime0, dateTime0, "h", projectVO0);
      DateTime dateTime1 = activityVO0.getEnd();
      assertEquals(1392418800000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withEra(0);
      Instant instant0 = new Instant();
      DateTime dateTime0 = localDate1.toDateTime(instant0);
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, (ProjectVO) null);
      DateTime dateTime1 = activityVO0.getEnd();
      assertSame(dateTime0, dateTime1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO("", "", "", false);
      ActivityVO activityVO0 = new ActivityVO((DateTime) null, (DateTime) null, projectVO0);
      String string0 = activityVO0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      ProjectVO projectVO0 = new ProjectVO("", (String) null, "", false);
      ActivityVO activityVO0 = new ActivityVO(dateTime0, dateTime0, projectVO0);
      activityVO0.setDescription("");
      String string0 = activityVO0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      activityVO0.setProject(projectVO0);
      assertEquals("year", projectVO0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      String string0 = activityVO0.getDescription();
      assertEquals("year", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      DateTime dateTime1 = activityVO0.getStart();
      assertEquals(0L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO("", "", "", false);
      ActivityVO activityVO0 = new ActivityVO((DateTime) null, (DateTime) null, projectVO0);
      ProjectVO projectVO1 = activityVO0.getProject();
      assertEquals("", projectVO1.getTitle());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO("", "", "", false);
      ActivityVO activityVO0 = new ActivityVO((DateTime) null, (DateTime) null, projectVO0);
      String string0 = activityVO0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProjectVO projectVO0 = new ProjectVO("", "", "", false);
      ActivityVO activityVO0 = new ActivityVO((DateTime) null, (DateTime) null, projectVO0);
      activityVO0.setEnd((DateTime) null);
      assertNull(activityVO0.getDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      DateTime dateTime1 = activityVO0.getEnd();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      ProjectVO projectVO0 = new ProjectVO("", "", "year", true);
      ActivityVO activityVO0 = new ActivityVO("year", dateTime0, dateTime0, "year", projectVO0);
      activityVO0.setStart(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
  }
}
