/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Dec 13 00:48:11 GMT 2022
 */

package org.remast.baralga.repository;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class GzipInterceptor_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.remast.baralga.repository.GzipInterceptor"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "Cp1252"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\maria\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "C:\\Users\\maria\\Documents\\projeto real\\jogamais\\baralga\\repository\\rest"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\maria"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "maria"); 
    java.lang.System.setProperty("user.timezone", "America/Cayenne"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(GzipInterceptor_ESTest_scaffolding.class.getClassLoader() ,
      "okhttp3.Interceptor",
      "org.remast.baralga.repository.GzipInterceptor",
      "okio.Source",
      "okhttp3.Response",
      "okhttp3.Interceptor$Chain",
      "okhttp3.Interceptor$Companion"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(GzipInterceptor_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.remast.baralga.repository.GzipInterceptor",
      "okhttp3.Interceptor$Companion",
      "okhttp3.Interceptor",
      "okhttp3.ResponseBody$Companion",
      "okhttp3.ResponseBody",
      "kotlin.DeprecationLevel",
      "okhttp3.internal.http.RealInterceptorChain",
      "kotlin.jvm.internal.Intrinsics",
      "okhttp3.OkHttpClient$Companion",
      "okhttp3.Protocol$Companion",
      "okhttp3.Protocol",
      "okhttp3.Headers$Companion",
      "okhttp3.Headers",
      "kotlin.internal.ProgressionUtilKt",
      "okio.Buffer",
      "okio.Buffer$UnsafeCursor",
      "okio._UtilKt",
      "okhttp3.ResponseBody$Companion$asResponseBody$1",
      "okhttp3.RequestBody$Companion",
      "okhttp3.RequestBody",
      "okhttp3.RequestBody$Companion$toRequestBody$2",
      "kotlin.collections.AbstractCollection",
      "kotlin.collections.AbstractList$Companion",
      "kotlin.collections.AbstractList",
      "okio.Options$Companion",
      "okio.Options",
      "okio.ByteString$Companion",
      "okio.ByteString",
      "okio.internal._ByteStringKt",
      "kotlin.collections.ArraysKt__ArraysJVMKt",
      "kotlin.collections.ArraysKt__ArraysKt",
      "kotlin.collections.ArraysKt___ArraysJvmKt",
      "kotlin.collections.ArraysKt___ArraysKt",
      "kotlin.collections.CollectionsKt__CollectionsJVMKt",
      "kotlin.collections.CollectionsKt__CollectionsKt",
      "kotlin.collections.ArrayAsCollection",
      "kotlin.collections.CollectionsKt__IterablesKt",
      "kotlin.collections.CollectionsKt__IteratorsJVMKt",
      "kotlin.collections.CollectionsKt__IteratorsKt",
      "kotlin.collections.CollectionsKt__MutableCollectionsJVMKt",
      "kotlin.comparisons.ComparisonsKt__ComparisonsKt",
      "okio.Segment$Companion",
      "okio.Segment",
      "okio.SegmentPool",
      "kotlin.text.Regex$Companion",
      "kotlin.text.Regex",
      "kotlin.text.StringsKt__AppendableKt",
      "kotlin.text.StringsKt__IndentKt",
      "kotlin.text.StringsKt__RegexExtensionsJVMKt",
      "kotlin.text.StringsKt__RegexExtensionsKt",
      "kotlin.text.StringsKt__StringBuilderJVMKt",
      "kotlin.text.StringsKt__StringBuilderKt",
      "kotlin.text.StringsKt__StringNumberConversionsJVMKt",
      "kotlin.text.StringsKt__StringNumberConversionsKt",
      "kotlin.text.StringsKt__StringsJVMKt",
      "kotlin.text.StringsKt__StringsKt",
      "okhttp3.internal.Util",
      "kotlin.collections.ArraysUtilJVM",
      "okhttp3.ConnectionSpec$Companion",
      "okhttp3.CipherSuite$Companion",
      "okhttp3.CipherSuite$Companion$ORDER_BY_NAME$1",
      "okhttp3.CipherSuite",
      "okhttp3.ConnectionSpec$Builder",
      "okhttp3.TlsVersion$Companion",
      "okhttp3.TlsVersion",
      "okhttp3.ConnectionSpec",
      "okhttp3.OkHttpClient",
      "okhttp3.OkHttpClient$Builder",
      "okhttp3.Dispatcher",
      "okhttp3.ConnectionPool",
      "okhttp3.internal.connection.RealConnectionPool$Companion",
      "okhttp3.internal.connection.RealConnectionPool",
      "okhttp3.internal.concurrent.TaskRunner$Companion",
      "okhttp3.internal.concurrent.TaskRunner$RealBackend",
      "okhttp3.internal.concurrent.TaskRunner$runnable$1",
      "okhttp3.internal.concurrent.TaskRunner",
      "okhttp3.internal.concurrent.TaskQueue",
      "okhttp3.internal.concurrent.Task",
      "okhttp3.internal.connection.RealConnectionPool$cleanupTask$1",
      "okhttp3.EventListener$Companion",
      "okhttp3.EventListener$Companion$NONE$1",
      "okhttp3.EventListener",
      "okhttp3.Authenticator$Companion",
      "okhttp3.Authenticator$Companion$AuthenticatorNone",
      "okhttp3.internal.authenticator.JavaNetAuthenticator",
      "okhttp3.Dns$Companion",
      "okhttp3.Dns$Companion$DnsSystem",
      "okhttp3.Dns",
      "okhttp3.Authenticator",
      "okhttp3.CookieJar$Companion",
      "okhttp3.CookieJar$Companion$NoCookies",
      "okhttp3.CookieJar",
      "okhttp3.internal.tls.OkHostnameVerifier",
      "okhttp3.CertificatePinner$Companion",
      "okhttp3.CertificatePinner$Builder",
      "kotlin.collections.CollectionsKt__MutableCollectionsKt",
      "kotlin.collections.CollectionsKt__ReversedViewsKt",
      "kotlin.collections.CollectionsKt___CollectionsJvmKt",
      "kotlin.collections.CollectionsKt___CollectionsKt",
      "kotlin.collections.SetsKt__SetsJVMKt",
      "kotlin.collections.SetsKt__SetsKt",
      "kotlin.collections.EmptySet",
      "okhttp3.CertificatePinner",
      "okhttp3.internal.connection.RouteDatabase",
      "okhttp3.internal.platform.Platform$Companion",
      "okhttp3.internal.platform.Jdk9Platform$Companion",
      "kotlin.text.CharsKt__CharJVMKt",
      "okhttp3.internal.platform.Jdk9Platform",
      "okhttp3.internal.platform.Platform",
      "okhttp3.internal.tls.CertificateChainCleaner$Companion",
      "okhttp3.internal.tls.CertificateChainCleaner",
      "okhttp3.internal.tls.BasicCertificateChainCleaner$Companion",
      "okhttp3.internal.tls.BasicCertificateChainCleaner",
      "okhttp3.internal.tls.BasicTrustRootIndex",
      "okhttp3.internal.connection.RealCall",
      "okhttp3.Address",
      "okhttp3.JavaNetAuthenticator",
      "kotlin.annotation.AnnotationRetention",
      "kotlin.annotation.AnnotationTarget",
      "okhttp3.WebSocketListener",
      "okhttp3.internal.http.BridgeInterceptor"
    );
  }
}
